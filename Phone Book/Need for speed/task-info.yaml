type: edu
custom_name: stage3
files:
- name: src/phonebook/Main.java
  visible: true
  text: |
    package phonebook;

    public class Main {
        public static void main(String[] args) {
            System.out.println("Hello World!");
        }
    }
  learner_created: false
- name: test/PhoneBookTest.java
  visible: false
  text: "import org.hyperskill.hstest.stage.StageTest;\nimport org.hyperskill.hstest.testcase.CheckResult;\n\
    import org.hyperskill.hstest.testcase.TestCase;\nimport phonebook.Main;\n\nimport\
    \ java.util.ArrayList;\nimport java.util.Arrays;\nimport java.util.List;\nimport\
    \ java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\npublic class PhoneBookTest\
    \ extends StageTest {\n    public PhoneBookTest() {\n        super(Main.class);\n\
    \    }\n    \n    private long timeOnTestStart;\n    \n    @Override\n    public\
    \ List<TestCase> generate() {\n        timeOnTestStart = System.currentTimeMillis();\n\
    \        return Arrays.asList(\n                new TestCase().setTimeLimit(30\
    \ * 60 * 1000)\n        );\n    }\n    \n    private CheckResult checkPhrases(String\
    \ reply, String... phrases) {\n        reply = reply.toLowerCase();\n        for\
    \ (String phrase : phrases) {\n            if (!reply.contains(phrase.toLowerCase()))\
    \ {\n                return CheckResult.wrong(\"Not found the part `\" + phrase\
    \ + \"` in your output.\");\n            }\n        }\n        return CheckResult.correct();\n\
    \    }\n    \n    private List<String> findAll(String reply, String regex) {\n\
    \        Matcher matcher = Pattern.compile(regex).matcher(reply);\n        List<String>\
    \ groups = new ArrayList<>();\n        while (matcher.find()) {\n            groups.add(matcher.group());\n\
    \        }\n        return groups;\n    }\n    \n    private String timeRegex\
    \ = \"(\\\\d+)\\\\s*min.*?(\\\\d+)\\\\s*sec.*?(\\\\d+)\\\\s*ms\";\n    private\
    \ Pattern timeRegexPattern = Pattern.compile(timeRegex);\n    \n    private long\
    \ parseTimestamp(String timestamp) {\n        Matcher matcher = timeRegexPattern.matcher(timestamp);\n\
    \        if (!matcher.matches() || matcher.groupCount() < 3) {\n            throw\
    \ new IllegalStateException(\"???Not matches the line \" + timestamp);\n     \
    \   }\n        int min = Integer.parseInt(matcher.group(1));\n        int sec\
    \ = Integer.parseInt(matcher.group(2));\n        int ms = Integer.parseInt(matcher.group(3));\n\
    \        return ms + sec * 1000 + min * 1000 * 60;\n    }\n    \n    @Override\n\
    \    public CheckResult check(String reply, Object clue) {\n        long realTime\
    \ = System.currentTimeMillis() - timeOnTestStart;\n        \n        reply = reply.toLowerCase();\n\
    \        \n        CheckResult res = checkPhrases(reply,\n                \"found\"\
    ,\n                \"min.\",\n                \"sec.\",\n                \"ms.\"\
    ,\n                \"sorting time\",\n                \"searching time\",\n  \
    \              \"linear search\",\n                \"bubble sort\",\n        \
    \        \"jump search\",\n                \"quick sort\",\n                \"\
    binary search\"\n        );\n        if (!res.isCorrect()) {\n            return\
    \ res;\n        }\n        \n        List<String> stat1 = findAll(reply, \"500\
    \ / 500\");\n        List<String> stat2 = findAll(reply, \"500/500\");\n     \
    \   \n        if (stat1.size() + stat2.size() < 3) {\n            return CheckResult.wrong(\"\
    Your output should contain 3 times the phrase `500 / 500`\");\n        }\n   \
    \     \n        List<String> timestamps = findAll(reply, timeRegex);\n       \
    \ if (timestamps.size() != 7) {\n            return CheckResult.wrong(\"Your output\
    \ should contain 7 timer outputs, but found \"\n                    + timestamps.size());\n\
    \        }\n        // should not fail..\n        long t1 = parseTimestamp(timestamps.get(0));\n\
    \        long t2 = parseTimestamp(timestamps.get(1));\n        long t3 = parseTimestamp(timestamps.get(2));\n\
    \        long t4 = parseTimestamp(timestamps.get(3));\n        long t5 = parseTimestamp(timestamps.get(4));\n\
    \        long t6 = parseTimestamp(timestamps.get(5));\n        long t7 = parseTimestamp(timestamps.get(6));\n\
    \        \n        if (Math.abs(t3 + t4 - t2) > 100) {\n            return CheckResult.wrong(\"\
    Your third and fourth timer outputs in total (sorting and searching) \" +\n  \
    \                  \"should be equal to the second (total search time).\");\n\
    \        }\n        if (Math.abs(t6 + t7 - t5) > 100) {\n            return CheckResult.wrong(\"\
    Your 6-th and 7-th timer outputs in total (sorting and searching) \" +\n     \
    \               \"should be equal to the 5-th (total search time).\");\n     \
    \   }\n        \n        long estimatedTime = t1 + t2 + t5;\n        if (realTime\
    \ < 1000) {\n            return CheckResult.wrong(\"Your program completes too\
    \ fast. Faster than a second!\");\n        }\n        \n        if (Math.abs(estimatedTime\
    \ - realTime) > estimatedTime * 0.3) {\n            return CheckResult.wrong(\"\
    Your estimated time is not similar to real time the program works. \" +\n    \
    \                \"Real time: \" + realTime + \"ms, estimated time: \" + estimatedTime\
    \ + \"ms\");\n        }\n        \n        return CheckResult.correct();\n   \
    \ }\n}\n"
  learner_created: false
- name: src/phonebook/JumpSearch.java
  visible: true
  text: |
    package phonebook;

    public class JumpSearch {
        public static long findEntries(Contact[] phoneBook, String[] fullNames) {
            long entries = 0;
            for (String key: fullNames) {
                if (isFound(phoneBook, key)) {
                    entries++;
                }
            }
            return entries;
        }

        public static boolean isFound(Contact[] phoneBook, String target) {
            int currentRight = 0;
            int prevRight = 0;
            if (phoneBook.length == 0) {
                return false;
            }
            if (phoneBook[currentRight].getName().equals(target)) {
                return true;
            }
            int jumpLength = (int) Math.sqrt(phoneBook.length);

            while (currentRight < phoneBook.length - 1) {
                currentRight = Math.min(phoneBook.length - 1, currentRight + jumpLength);

                if (phoneBook[currentRight].getName().compareTo(target) >= 0) {
                    break;
                }
                prevRight = currentRight;
            }
            if ((currentRight == phoneBook.length - 1) && target.compareToIgnoreCase(phoneBook[currentRight].getName()) > 0) {
                return false;
            }
            return LinearSearch.isFound(phoneBook, target, prevRight, currentRight);
        }
    }
  learner_created: true
- name: src/phonebook/LinearSearch.java
  visible: true
  text: |
    package phonebook;

    public class LinearSearch {
        public static long findEntries(Contact[] phoneBook, String[] names) {
            long entries = 0;
            for (String fullName : names) {
                for (Contact contact : phoneBook) {
                    if (contact.getName().equals(fullName)) {
                        entries++;
                        break;
                    }
                }
            }
            return entries;
        }
        public static boolean isFound(Contact[] phoneBook, String fullName, int from, int to) {
            for (int i = to; i > from; i--) {
                if (phoneBook[i].getName().equals(fullName)) {
                    return true;
                }
            }
            return false;
        }
    }
  learner_created: true
- name: src/phonebook/Contact.java
  visible: true
  text: |+
    package phonebook;

    public class Contact {
        private final int number;
        private final String name;

        public Contact(int number, String name) {
            this.number = number;
            this.name = name;
        }

        public int getNumber() {
            return number;
        }

        public String getName() {
            return name;
        }

        @Override
        public String toString() {
            return "Contact{" +
                    "number=" + number +
                    ", name='" + name + '\'' +
                    '}';
        }
    }

  learner_created: true
- name: src/phonebook/PhoneBook.java
  visible: true
  text: |
    package phonebook;

    public class PhoneBook {
        public static Contact[] createContactBook(String[] textBook) {
            Contact[] phoneBook = new Contact[textBook.length];
            for (int i = 0; i < textBook.length; i++) {
                String[] info = textBook[i].split(" ");
                StringBuilder name = new StringBuilder();
                for (int j = 1; j < info.length; j++) {
                    name.append(info[j]);
                    if (j == info.length - 1) {
                        break;
                    }
                    name.append(" ");
                }
                phoneBook[i] = new Contact(Integer.parseInt(info[0]), name.toString());
            }
            return phoneBook;
        }
    }
  learner_created: true
- name: src/phonebook/FileReader.java
  visible: true
  text: |
    package phonebook;

    import java.io.IOException;
    import java.nio.file.Files;
    import java.nio.file.Path;

    public class FileReader {
        public static String[] readFromFile(String pathToFile) throws IOException {
            return Files.readAllLines(Path.of(pathToFile)).toArray(new String[0]);
        }
    }
  learner_created: true
- name: src/phonebook/BubbleSort.java
  visible: true
  text: |-
    package phonebook;

    public class BubbleSort {
        public static boolean sort(Contact[] phoneBook, long timeout) {
            long start = System.currentTimeMillis();
            for (int i = 0; i < phoneBook.length - 1; i++) {
                for (int j = 0; j < phoneBook.length - i - 1; j++) {
                    if (System.currentTimeMillis() - start > timeout) {
                        return false;
                    }
                    if (phoneBook[j].getName().compareToIgnoreCase(phoneBook[j + 1].getName()) > 0) {
                        Contact temp = phoneBook[j];
                        phoneBook[j] = phoneBook[j + 1];
                        phoneBook[j + 1] = temp;
                    }
                }
            }
            return true;
        }
    }
  learner_created: true
- name: src/phonebook/QuickSort.java
  visible: true
  learner_created: true
- name: src/phonebook/BinarySearch.java
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/63/stages/342/implement#comment
status: Solved
feedback:
  message: Congratulations!
  time: Mon, 04 Jan 2021 16:20:35 UTC
record: 3
